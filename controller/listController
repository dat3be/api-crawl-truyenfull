const puppeteer = require('puppeteer');

const listController = {
    getListNewNovel: async (req, res) => {
        try {
            const url = 'https://truyenfull.vn/danh-sach/truyen-moi/';
            const urlBase = 'https://truyenfull.vn/'
            const browser = await puppeteer.launch({
                headless: true,
                ignoreDefaultArgs: ['--disable-extensions'],
            });
            const page = await browser.newPage();
            await page.goto(url);

            await autoScroll(page); // Cuộn trang xuống để tải thêm nội dung

            const listDataTeam = await page.evaluate(() => {
                const dataList = [];
                const elements = document.querySelectorAll('.list-truyen .row');

                elements.forEach(element => {
                    const titleElement = element.querySelector('.truyen-title > a');

                    const titleItem = titleElement ? titleElement.textContent.trim() : '';
                    const imgElement = element.querySelector('.col-xs-3 img');
                    const src = imgElement ? imgElement.getAttribute('src') : '';
                    const authorElement = element.querySelector('.author');
                    const author = authorElement ? authorElement.textContent.trim() : '';
                    const chapterElement = element.querySelector('.col-xs-2.text-info a');
                    const chapterText = chapterElement ? chapterElement.textContent.trim() : '';
                    const labelElements = element.querySelectorAll('.label-title');
                    const labelList = Array.from(labelElements).map(label => {
                        return label.classList[1].replace('label-', ''); // Lấy class thứ hai của mỗi phần tử, đó chính là giá trị như 'new', 'hot'
                    });

                    const titleHref = titleElement ? titleElement.getAttribute('href') : '';

                    if (titleItem != null && titleItem != '') {
                        dataList.push({
                            nameNovel: titleItem,
                            imageUrl: src,
                            author: author,
                            chapterText: chapterText,
                            labelList: labelList,
                            href: 'https://truyen-full-api.onrender.com/v1' + titleHref.split('https://truyenfull.vn')[1]
                        });
                    }
                });

                return dataList;
            });

            await browser.close();
            res.status(200).json(listDataTeam);
        } catch (error) {
            console.error(error);
            res.status(500).json({ error: "Internal Server Error:" + error.name });
        }
    },

    getNovelDetail: async (req, res) => {
        try {
            const browser = await puppeteer.launch({ headless: true }); // Mở trình duyệt ở chế độ ẩn
            const page = await browser.newPage();
            await page.goto(urlBase + req.params.novel + '/');

            const novelInfo = await page.evaluate(() => {
                const infoElement = document.querySelector('.info');
                const authorElement = Array.from(infoElement.querySelectorAll('h3')).find(el => el.textContent.trim() === 'Tác giả:').nextElementSibling;
                const sourceElement = Array.from(infoElement.querySelectorAll('h3')).find(el => el.textContent.trim() === 'Nguồn:').nextElementSibling;
                const statusElement = Array.from(infoElement.querySelectorAll('h3')).find(el => el.textContent.trim() === 'Trạng thái:').nextElementSibling;

                const author = authorElement ? authorElement.textContent.trim() : '';
                const source = sourceElement ? sourceElement.textContent.trim() : '';
                const status = statusElement ? statusElement.textContent.trim() : '';

                const genres = Array.from(infoElement.querySelectorAll('a[itemprop="genre"]')).map(genre => genre.getAttribute('title'));
                const name = Array.from(document.querySelectorAll('h3[itemprop="name"]')).map(element => element.textContent.trim())[0];
                const ratingValue = Array.from(document.querySelectorAll('span[itemprop = "ratingValue"]')).map(element => element.textContent.trim())[0]

                const descriptionElement = document.querySelector('.desc-text[itemprop="description"]');
                if (descriptionElement) {
                    const descriptionText = descriptionElement.innerHTML.trim();
                    description = descriptionText.split('<br>');
                }

                const chapters = Array.from(document.querySelectorAll('.l-chapter .l-chapters li')).map(li => {
                    const linkElement = li.querySelector('a');
                    const chapterNumber = linkElement.textContent.trim().match(/\d+/)[0];
                    const chapterTitle = linkElement.getAttribute('title');
                    const chapterUrl = linkElement.getAttribute('href');

                    return {
                        number: chapterNumber,
                        title: chapterTitle,
                        url: 'https://truyen-full-api.onrender.com/v1' + chapterUrl.split('https://truyenfull.vn')[1]
                    };
                });





                return {

                    name: name,
                    author: author,
                    genres: genres,
                    source: source,
                    status: status,
                    ratingValue: ratingValue,
                    description: description,
                    chapters: chapters
                };
            });

            await browser.close();

            res.status(200).json(novelInfo);
        } catch (error) {
            console.error(error);
            res.status(500).json({ error: "Internal Server Error" });
        }
    }
}

async function autoScroll(page) {
    await page.evaluate(async () => {
        await new Promise((resolve, reject) => {
            let totalHeight = 0;
            const distance = 100;
            const timer = setInterval(() => {
                const scrollHeight = document.body.scrollHeight;
                window.scrollBy(0, distance);
                totalHeight += distance;

                if (totalHeight >= scrollHeight) {
                    clearInterval(timer);
                    resolve();
                }
            }, 100);
        });
    });
}


module.exports = listController;